rm(list=ls())
setwd("/home/oskar/repos/cryptocurrency-experiments/data")
file.names <- dir()
# create a list of dataframes, each csv file corresponds to one dataframe
dfs.list = lapply(file.names, read.csv, header = FALSE)
# inner join/merge the dataframes by v1 (date column)
data = Reduce(function(x, y) merge(x, y, by="V1"), dfs.list)
# remove .csv from file.names and give columns those names (i.e. each column is named by its file)
colnames(data) = c("date-time", Map(function(s) substr(s, 1, nchar(s) - 4), file.names))
# rename rows to date-time
rownames(data) = data[, "date-time"]
# remove date-time column
data = data[, -1]
X = data[, !colnames(data) %in% c("market-price"), drop = FALSE]
Y = data[, colnames(data) %in% c("market-price"), drop = TRUE]
#require(randomForest)
#rf <- randomForest(x = X, y = Y, importance = TRUE)
#varImpPlot(rf, type=2, main="Variable importance")
rm(list=ls())
setwd("/home/oskar/repos/cryptocurrency-experiments/data")
file.names <- dir()
# create a list of dataframes, each csv file corresponds to one dataframe
dfs.list = lapply(file.names, read.csv, header = FALSE)
# inner join/merge the dataframes by v1 (date column)
data = Reduce(function(x, y) merge(x, y, by="V1"), dfs.list)
# remove .csv from file.names and give columns those names (i.e. each column is named by its file)
colnames(data) = c("date-time", Map(function(s) substr(s, 1, nchar(s) - 4), file.names))
# rename rows to date-time
rownames(data) = data[, "date-time"]
# remove date-time column
data = data[, -1]
X = data[, !colnames(data) %in% c("market-price"), drop = FALSE]
Y = data[, colnames(data) %in% c("market-price"), drop = TRUE]
#require(randomForest)
#rf <- randomForest(x = X, y = Y, importance = TRUE)
#varImpPlot(rf, type=2, main="Variable importance")
View(data)
View(data)
data[,]
data[2:,]
nrow(data)
data[1:2,]
data[2:nrow(data),]
data[2:nrow(data), ] ./ data[1:nrow(data) - 1]
data[2:nrow(data), ] / data[1:nrow(data) - 1]
data[2:nrow(data), ] / data[1:nrow(data) - 1, ]
diffs = data[2:nrow(data), ] / data[1:nrow(data) - 1, ]
View(diffs)
diffs$market-price
diffs$"market-price"
diffs = data[2:nrow(data), ] / data[1:nrow(data) - 1, ] - 1
View(diffs)
diffs$"market-price"
diffs = (data[2:nrow(data), ] / data[1:nrow(data) - 1, ] - 1) * 100
diffs$"market-price"
View(diffs)
rm(list=ls())
setwd("/home/oskar/repos/cryptocurrency-experiments/data")
file.names <- dir()
# create a list of dataframes, each csv file corresponds to one dataframe
dfs.list = lapply(file.names, read.csv, header = FALSE)
# inner join/merge the dataframes by v1 (date column)
data.raw = Reduce(function(x, y) merge(x, y, by="V1"), dfs.list)
# remove .csv from file.names and give columns those names (i.e. each column is named by its file)
colnames(data.raw) = c("date-time", Map(function(s) substr(s, 1, nchar(s) - 4), file.names))
rownames(data.raw) = data[, "date-time"]
data.raw = data.raw[, -1]
X = data.raw[, !colnames(data) %in% c("market-price"), drop = FALSE]
Y = data.raw[, colnames(data) %in% c("market-price"), drop = TRUE]
diffs = (data.raw[2:nrow(data.raw), ] / data[1:nrow(data.raw) - 1, ] - 1) * 100
#require(randomForest)
#rf <- randomForest(x = X, y = Y, importance = TRUE)
#varImpPlot(rf, type=2, main="Variable importance")
rm(list=ls())
setwd("/home/oskar/repos/cryptocurrency-experiments/data")
file.names <- dir()
# create a list of dataframes, each csv file corresponds to one dataframe
dfs.list = lapply(file.names, read.csv, header = FALSE)
# inner join/merge the dataframes by v1 (date column)
data.raw = Reduce(function(x, y) merge(x, y, by="V1"), dfs.list)
# remove .csv from file.names and give columns those names (i.e. each column is named by its file)
colnames(data.raw) = c("date-time", Map(function(s) substr(s, 1, nchar(s) - 4), file.names))
rownames(data.raw) = data[, "date-time"]
data.raw = data.raw[, -1]
X = data.raw[, !colnames(data) %in% c("market-price"), drop = FALSE]
Y = data.raw[, colnames(data) %in% c("market-price"), drop = TRUE]
diffs = (data.raw[2:nrow(data.raw), ] / data.raw[1:nrow(data.raw) - 1, ] - 1) * 100
#require(randomForest)
#rf <- randomForest(x = X, y = Y, importance = TRUE)
#varImpPlot(rf, type=2, main="Variable importance")
plot(Y)
plot(data.raw[, 'date-time'], data.raw[, 'market-price']
)
plot(data.raw[, 'date-time'], data.raw[, 'market-price'])
plot(data.raw[, "date-time"], data.raw[, "market-price"])
plot(rownames(data.raw), data.raw[, "market-price"])
plot(rownames(data.raw), data.raw[, "market-price"])
lines(rownames(data.raw), data.raw[, "market-price"])
lines(rownames(data.raw), data.raw[, "market-price"])
plot()
plot.new
plot.new()
lines(rownames(data.raw), data.raw[, "market-price"])
plot(x=rownames(data.raw), y = data.raw[, "market-price"], type = "l")
x11()
plot(x=rownames(data.raw), y = data.raw[, "market-price"], type = "l")
plot(x=rownames(diffs), y = diffs[, "market-price"], type = "l")
x11()
plot(rownames(diffs), log(diffs[, "market-price"], type = "l"))
x11()
plot(rownames(diffs), log(diffs[, "market-price"]), type = "l"))
log(diffs[, "market-price"])
rm(list=ls())
setwd("/home/oskar/repos/cryptocurrency-experiments/data")
file.names <- dir()
# create a list of dataframes, each csv file corresponds to one dataframe
dfs.list = lapply(file.names, read.csv, header = FALSE)
# inner join/merge the dataframes by v1 (date column)
data.raw = Reduce(function(x, y) merge(x, y, by="V1"), dfs.list)
# remove .csv from file.names and give columns those names (i.e. each column is named by its file)
colnames(data.raw) = c("date-time", Map(function(s) substr(s, 1, nchar(s) - 4), file.names))
rownames(data.raw) = data[, "date-time"]
data.raw = data.raw[, -1]
x11()
plot(rownames(data.raw), data.raw[, "market-price"], type = "l")
#X = data.raw[, !colnames(data) %in% c("market-price"), drop = FALSE]
#Y = data.raw[, colnames(data) %in% c("market-price"), drop = TRUE]
#require(randomForest)
#rf <- randomForest(x = X, y = Y, importance = TRUE)
#varImpPlot(rf, type=2, main="Variable importance")
diffs = (data.raw[2:nrow(data.raw), ] / data.raw[1:nrow(data.raw) - 1, ] - 1)
x11()
plot(rownames(diffs), log(diffs[, "market-price"]), type = "l"))
x11()
plot(rownames(diffs), log(diffs[, "market-price"]), type = "l")
x11()
plot(rownames(diffs), diffs[, "market-price"], type = "l")
acf(diffs[, "market-price"])
pacf(diffs[, "market-price"])
acf(diffs[, "market-price"])
x11()
plot(rownames(diffs), diffs[, "market-price"], type = "l")
mean(diffs[, "market-price"])
acf(ts, plotlag, type="correlation")
rm(list=ls())
df = read.csv("A4_gps_log.csv")
# Question 4.1
par(mfrow=c(1,1))
plot(df$t, df$mlat, xlab="time", ylab="latitude", main="Latitude change in time")
plot(df$t, df$mlong, xlab="time", ylab="longitude", main="Longitude change in time")
plot(df$mlat, df$mlong, xlab="latitude", ylab="longitude", main="Latitude-longitude")
ts = diffs[, "market-price"]
rm(list=ls())
setwd("/home/oskar/repos/cryptocurrency-experiments/data")
file.names <- dir()
# create a list of dataframes, each csv file corresponds to one dataframe
dfs.list = lapply(file.names, read.csv, header = FALSE)
# inner join/merge the dataframes by v1 (date column)
data.raw = Reduce(function(x, y) merge(x, y, by="V1"), dfs.list)
# remove .csv from file.names and give columns those names (i.e. each column is named by its file)
colnames(data.raw) = c("date-time", Map(function(s) substr(s, 1, nchar(s) - 4), file.names))
rownames(data.raw) = data[, "date-time"]
data.raw = data.raw[, -1]
#x11()
#plot(rownames(data.raw), data.raw[, "market-price"], type = "l")
#X = data.raw[, !colnames(data) %in% c("market-price"), drop = FALSE]
#Y = data.raw[, colnames(data) %in% c("market-price"), drop = TRUE]
#require(randomForest)
#rf <- randomForest(x = X, y = Y, importance = TRUE)
#varImpPlot(rf, type=2, main="Variable importance")
diffs = (data.raw[2:nrow(data.raw), ] / data.raw[1:nrow(data.raw) - 1, ] - 1)
#x11()
#plot(rownames(diffs), diffs[, "market-price"], type = "l")
ts = diffs[, "market-price"]
par(mfrow = c(2,2))
model1 = arima(ts, order=c(1,1,0), seasonal=list(order=c(0,0,0), period=24))
#acf(as.numeric(model1$residuals[-1:-25]), type="correlation", lag.max=200, main="ARIMA (0,1,0)x(1,1,0)")
#pacf(as.numeric(model1$residuals[-1:-25]), lag.max=200, main="ARIMA (0,1,0)x(1,1,0)")
model1$residuals
acf(as.numeric(model1$residuals), type="correlation", lag.max=200, main="ACF")
par(mfrow = c(1,1))
acf(as.numeric(model1$residuals), type="correlation", lag.max=200, main="ACF")
model1 = arima(ts, order=c(1,3,0), seasonal=list(order=c(0,0,0), period=24))
acf(as.numeric(model1$residuals), type="correlation", lag.max=200, main="ACF")
model1 = arima(ts, order=c(1,0,0), seasonal=list(order=c(0,0,0), period=24))
acf(as.numeric(model1$residuals), type="correlation", lag.max=200, main="ACF")
model1 = arima(ts, order=c(2,0,0), seasonal=list(order=c(0,0,0), period=24))
acf(as.numeric(model1$residuals), type="correlation", lag.max=200, main="ACF")
model1 = arima(ts, order=c(2,1,0), seasonal=list(order=c(0,0,0), period=24))
acf(as.numeric(model1$residuals), type="correlation", lag.max=200, main="ACF")
model1 = arima(ts, order=c(2,0,0), seasonal=list(order=c(0,0,0), period=24))
acf(as.numeric(model1$residuals), type="correlation", lag.max=200, main="ACF")
model1 = arima(ts, order=c(5,0,0), seasonal=list(order=c(0,0,0), period=24))
acf(as.numeric(model1$residuals), type="correlation", lag.max=200, main="ACF")
model1 = arima(ts, order=c(10,0,0), seasonal=list(order=c(0,0,0), period=24))
acf(as.numeric(model1$residuals), type="correlation", lag.max=200, main="ACF")
model1$model
plot(rownames(diffs), diffs[, "market-price"], type = "l")
plot(rownames(diffs), diffs[1000:nrow(diffs), "market-price"], type = "l")
x11()
plot(rownames(diffs)[1000:nrow(diffs)], diffs[1000:nrow(diffs), "market-price"], type = "l")
x11()
plot(rownames(diffs)[1600:nrow(diffs)], diffs[1600:nrow(diffs), "market-price"], type = "l")
x11()
plot(rownames(diffs)[1600:nrow(diffs)], diffs[1600:nrow(diffs), "market-price"], type = "p")
x11()
plot(rownames(diffs)[1600:nrow(diffs)], diffs[1600:nrow(diffs), "market-price"], type = "p")
lines(rownames(diffs)[1600:nrow(diffs)], diffs[1600:nrow(diffs), "market-price"])
ts = diffs[, "market-price"]
par(mfrow = c(1,1))
model1 = arima(ts, order=c(10,0,0), seasonal=list(order=c(0,0,0), period=24))
acf(as.numeric(model1$residuals), type="correlation", lag.max=200, main="ACF")
model1$model
model1 = arima(ts, order=c(5,0,0), seasonal=list(order=c(0,0,0), period=24))
acf(as.numeric(model1$residuals), type="correlation", lag.max=200, main="ACF")
model1$model
acf(ts, type="correlation", lag.max=200, main="ACF")
acf(ts, type="correlation", lag.max=1000, main="ACF")
acf(ts, type="correlation", lag.max=500, main="ACF")
acf(ts, type="correlation", lag.max=100, main="ACF")
acf(ts, type="correlation", lag.max=40, main="ACF")
x11()
plot(rownames(diffs)[1600:nrow(diffs)], diffs[1600:nrow(diffs), "market-price"], type = "p")
lines(rownames(diffs)[1600:nrow(diffs)], diffs[1600:nrow(diffs), "market-price"])
ts = diffs[1600:nrow(diffs), "market-price"]
acf(ts, type="correlation", lag.max=40, main="ACF")
ts = diffs[1500:nrow(diffs), "market-price"]
acf(ts, type="correlation", lag.max=40, main="ACF")
